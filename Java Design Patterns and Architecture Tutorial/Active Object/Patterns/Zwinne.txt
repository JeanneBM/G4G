ActiveObjectEngine.java 

import java.util.LinkedList; 
import java.util.Iterator;

public class ActiveObjectEngine 
{    
	LinkedList itsCommands = new LinkedList();
	
    public void addCommand(Command c)    
	{        
		itsCommands.add(c);    
	}    
	public void run()    
	{        
		while (!itsCommands.isEmpty())        
		{            
			Command c = (Command) itsCommands.getFirst();            
			itsCommands.removeFirst();            
			c.execute();        
		}    
	} 
}

---------------------------------------------------------------------------------------------

Command.java 

public interface Command 
{    
	public void execute() throws Exception; 
}

---------------------------------------------------------------------------------------------

TestSleepCommand.java 

import junit.framework.*; 
import junit.swingui.TestRunner;

public class TestSleepCommand extends TestCase 
{    
	public static void main(String[] args)    
	{        
		TestRunner.main(new String[]{"TestSleepCommand"});    
	}
	
    public TestSleepCommand(String name)    
	{        
		super(name);    
	}
	
    private boolean commandExecuted = false;
    
	public void testSleep() throws Exception    
	{
		Command wakeup = new Command()        
		{            
			public void execute() {commandExecuted = true;}        
		};        
		ActiveObjectEngine e = new ActiveObjectEngine();        
		SleepCommand c = new SleepCommand(1000,e,wakeup);        
		e.addCommand(c);        
		long start = System.currentTimeMillis();        
		e.run();        
		long stop = System.currentTimeMillis();        
		long sleepTime = (stop-start);        
		assert("Oczekiwano wartości SleepTime " + sleepTime + "> 1000", sleepTime > 1000);        
		assert("Oczekiwano wartości SleepTime " + sleepTime + "< 1100", sleepTime < 1100);        
		assert("Polecenie wykonano", commandExecuted);    
	} 
}

---------------------------------------------------------------------------------------------

SleepCommand.java 

public class SleepCommand implements Command 
{    
	private Command wakeupCommand = null;    
	private ActiveObjectEngine engine = null;    
	private long sleepTime = 0;    private long startTime = 0;    
	private boolean started = false;
	
    public SleepCommand(long milliseconds, ActiveObjectEngine e, Command wakeupCommand)    
	
	{        
		sleepTime = milliseconds;        
		engine = e;        
		this.wakeupCommand = wakeupCommand;    
	}
	
    public void execute() throws Exception    
	{        
		slong currentTime = System.currentTimeMillis();        
		if (!started)        
		{            
			started = true;            
			startTime = currentTime;            
			engine.addCommand(this);        
		}        
		else if ((currentTime - startTime) < sleepTime)   
		{            
			engine.addCommand(this);        
		}        
		else        
		{
           engine.addCommand(wakeupCommand);       
		}    
	} 
} 
	
---------------------------------------------------------------------------------------------


