JUnit – narzędzie służące do tworzenia powtarzalnych testów jednostkowych oprogramowania pisanego w języku Java.

Cechy JUnit:

    metoda najmniejszą jednostką testowania,
    przypadki testowe,
    oddzielenie testów od kodu,
    wiele mechanizmów uruchamiania,
    tworzenie raportów,
    integracja z różnymi środowiskami programistycznymi.

W JUnit 3 testy są wykrywane za pomocą mechanizmu refleksji:

 public class HelloWorld extends TestCase
 {
   public void testMultiplication()
   {
     // Testing if 2*2=4:
     assertEquals ("Multiplication", 4, 2*2);
   }
 }

W JUnicie 4 używane są do tego adnotacje (wprowadzone w Javie 1.5):

 public class HelloWorld
 {
   @Test public void testMultiplication()
   {
     // Testing if 2*2=4:
     assertEquals ("Multiplication", 4, 2*2);
   }

----------------------------------------------------------------------------------------------

import org.junit.Test;

import static org.junit.Assert.assertEquals;

    public class NazwaTests {
        @Test
        public void NazwaSprawdzanejKlasy_SprawdzanyElement_shouldReturn_ChwytliwaNazwaEfektu() {
            AbstractMessagingTemplateMethod msg = new DeutschWelcomeTemplateMethod();
            assertEquals("Guten Tag! " + "Ich heiße Asia. " + "Auf Wiedersehen!", msg.execute());
        }

        @Test
        public void NazwaSprawdzanejKlasy_SprawdzanyElement_shouldReturn_ChwytliwaNazwaEfektu() {
            AbstractMessagingTemplateMethod msg = new PolishWelcomeTemplateMethod();
            assertEquals("Czesc! " + "Mam na imie Asia. " + "Do zobaczenia!", msg.execute());
        }

        @Test
        public void NazwaSprawdzanejKlasy_SprawdzanyElement_shouldReturn_ChwytliwaNazwaEfektu() {
            AbstractMessagingTemplateMethod msg = new SpanishWelcomeTemplateMethod();
            assertEquals("Hola! " + "Mi nombre es Asia. " + "Hasta La Vista!", msg.execute());
        }
 ----------------------------------------------------------------------------------------------       

import org.junit.Test;

import static org.junit.Assert.assertEquals;

    public class MessagingTemplateMethodTests {
        @Test
        public void DeutschWelcomeTemplateMethod_execute_shouldReturn_AllWelcomes() {
            AbstractMessagingTemplateMethod msg = new DeutschWelcomeTemplateMethod(); //obiekt, ktory sprawdzamy
            assertEquals("Guten Tag! " + "Ich heiße Asia. " + "Auf Wiedersehen!", msg.execute()); //oczekiwana forma obiektu, wywołanie metody 
        }

        @Test
        public void PolishWelcomeTemplateMethod_execute_shouldReturn_AllWelcomes() {
            AbstractMessagingTemplateMethod msg = new PolishWelcomeTemplateMethod();
            assertEquals("Czesc! " + "Mam na imie Asia. " + "Do zobaczenia!", msg.execute());
        }

        @Test
        public void SpanishWelcomeTemplateMethod_execute_shouldReturn_AllWelcomes() {
            AbstractMessagingTemplateMethod msg = new SpanishWelcomeTemplateMethod();
            assertEquals("Hola! " + "Mi nombre es Asia. " + "Hasta La Vista!", msg.execute());
        }
  
----------------------------------------------------------------------------------------------       

import org.junit.Assert;
import org.junit.Test;

public class SpanishWelcomeTemplateMethodTest {
    @Test
    public void createHead_ShouldReturn_SpanishWelcome() {
        AbstractMessagingTemplateMethod msg = new SpanishWelcomeTemplateMethod();
        Assert.assertEquals("Hola! ", msg.createHead());
    }
    @Test
    public void createBody_ShouldReturn_SpanishWelcome() {
        AbstractMessagingTemplateMethod msg = new SpanishWelcomeTemplateMethod();
        Assert.assertEquals("Mi nombre es Asia. ", msg.createBody());
    }

    @Test
    public void createFooter_ShouldReturn_SpanishWelcome() {
        AbstractMessagingTemplateMethod msg = new SpanishWelcomeTemplateMethod();
        Assert.assertEquals("Hasta La Vista!", msg.createFooter());
    }
}


